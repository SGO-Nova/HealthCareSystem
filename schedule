public class schedule {
	//might need rework for implementation of dates as well.
	
	static Object[][] sched = new Object[2][8];//holds info for time, and if time is full or not
	static Object[][] datedSched = new Object[2][7];//holds info of the above array, and the date.
	public schedule()
	{
		for(int i = 0; i < 8; i++)
		{
			for(int j =0; j < 2; j++)
			{
				if(j==0)
				{
					if(i+9<=12)
					{
						sched[i][j] = i+9;//sets time
					}
					else
					{
						sched[i][j] = i-3;//sets time
					}
				}
				else
				{
					sched[i][j] = "Free";//sets status if open since this is a new schedule.
				}
			}
		}
		for(int i = 0; i < 7; i++)
		{
			for(int j = 0; j<2;j++)
			{
				if(j==0)
				{
					//set date
				}
				if(j==1)
				{
					datedSched[i][1] = sched;
					
				}
			}
		}
	}
	
	public boolean updateSchedule(int time,String date)
	{
		for(int i = 0; i < 8; i++)
		{
			if(time == Integer.parseInt(sched[i][0].toString()))
			{
				sched[i][1] = "Full";
				return true;
			}
		}
		return false;
	}
	
	public void cancelApp(String time,String date)
	{
		for(int x = 0; x<7;x++)
		{
			if(date == datedSched[x][0].toString())
			{
				for(int i = 0; i < 8; i++)
				{
					if(time == sched[i][0].toString())
					{
						
						sched[i][1] = "Free";
					}
				}
			}
		}
	}
	
	public boolean checkSchedule(String time,String date)
	{
		for(int i = 0; i< 8; i++)
		{
			if(time == sched[i][0].toString())
			{
				if(sched[i][1].toString() == "Full")
				{
					return false;//returns false if they are not free at that time
				}
			}
		}
		return true;//otherwise returns true, since they are free at that time
	}
	
	public void printSchedule(String date)
	{
		for(int x = 0; x < 7; x++)
		{
			if(datedSched[x][0].toString() == date)
			{
				for(int i = 0; i<8; i++)
				{
					for(int j = 0; j<2;j++)
					{
						//print, but in JavaFX
					}
				}
			}
		}
	}
}
